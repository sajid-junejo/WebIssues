/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package webissuesFrame;

import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;

/**
 *
 * @author sajid.ali
 */
public class Test extends javax.swing.JFrame {

    /**
     * Creates new form Test
     */
    public Test() {
        initComponents();
        setupComponentListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 0));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 287, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 236, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(0, 255, 51));
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel2MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel2MouseMoved(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(255, 0, 0));
        jPanel3.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel3MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel3MouseMoved(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 218, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void setupComponentListeners() {
        jPanel1.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                updatePanelSizes(jPanel1, jPanel2, jPanel3);
            }
        });

        jPanel2.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                updatePanelSizes(jPanel2, jPanel1, jPanel3);
            }
        });

        jPanel3.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                updatePanelSizes(jPanel3, jPanel1, jPanel2);
            }
        });
    }

    private void updatePanelSizes(javax.swing.JPanel sourcePanel, javax.swing.JPanel panel1, javax.swing.JPanel panel2) {
        // Get the new size of the source panel
        int sourcePanelWidth = sourcePanel.getWidth();
        int sourcePanelHeight = sourcePanel.getHeight();

        // Update the size of the other panels proportionally
        int panel1NewWidth = sourcePanelWidth;
        int panel1NewHeight = (int) (sourcePanelHeight * 0.5);
        int panel2NewWidth = sourcePanelWidth;
        int panel2NewHeight = (int) (sourcePanelHeight * 0.5);

        // Set the new sizes for the panels
        panel1.setPreferredSize(new Dimension(panel1NewWidth, panel1NewHeight));
        panel2.setPreferredSize(new Dimension(panel2NewWidth, panel2NewHeight));

        // Repaint the panels to update the changes
        panel1.revalidate();
        panel1.repaint();
        panel2.revalidate();
        panel2.repaint();
    }
    
    private void jPanel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseDragged
        // Get the current position of the mouse in panel coordinates
    int mouseX = evt.getX();
    int mouseY = evt.getY();

    // Get the current size of the panel
    int panelWidth = jPanel2.getWidth();
    int panelHeight = jPanel2.getHeight();

    // Define the minimum size (adjust this value according to your preference)
    int minWidth = 100;
    int minHeight = 100;

    // Check if the mouse is being dragged on the left or right border
    if (jPanel2.getCursor().getType() == Cursor.E_RESIZE_CURSOR) {
        int newWidth = Math.max(minWidth, panelWidth + (mouseX - panelWidth / 2));
        jPanel2.setPreferredSize(new Dimension(newWidth, panelHeight));
    }

    // Check if the mouse is being dragged on the top or bottom border
    if (jPanel2.getCursor().getType() == Cursor.N_RESIZE_CURSOR) {
        int newHeight = Math.max(minHeight, panelHeight + (mouseY - panelHeight / 2));
        jPanel2.setPreferredSize(new Dimension(panelWidth, newHeight));
    }

    // Repaint the panel to update the changes
    jPanel2.revalidate();
    jPanel2.repaint();
    }//GEN-LAST:event_jPanel2MouseDragged

    private void jPanel2MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseMoved
        int mouseX = evt.getX();
        int mouseY = evt.getY();
    
    // Get the current size of the panel
    int panelWidth = jPanel2.getWidth();
    int panelHeight = jPanel2.getHeight();
    int borderWidth = 5;
    if (mouseX <= borderWidth || mouseX >= panelWidth - borderWidth) {
        jPanel2.setCursor(Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR));
    } else if (mouseY <= borderWidth || mouseY >= panelHeight - borderWidth) {
        jPanel2.setCursor(Cursor.getPredefinedCursor(Cursor.N_RESIZE_CURSOR));
    } else {
        // If the mouse is not over any border, reset the cursor to default
        jPanel2.setCursor(Cursor.getDefaultCursor());
    }
    }//GEN-LAST:event_jPanel2MouseMoved

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        // TODO add your handling code here:
        // Get the current position of the mouse in panel coordinates
    int mouseX = evt.getX();
    int mouseY = evt.getY();

    // Get the current size of the panel
    int panelWidth = jPanel1.getWidth();
    int panelHeight = jPanel1.getHeight();

    // Define the minimum size (adjust this value according to your preference)
    int minWidth = 100;
    int minHeight = 100;

    // Check if the mouse is being dragged on the left or right border
    if (jPanel1.getCursor().getType() == Cursor.E_RESIZE_CURSOR) {
        int newWidth = Math.max(minWidth, panelWidth + (mouseX - panelWidth / 2));
        jPanel1.setPreferredSize(new Dimension(newWidth, panelHeight));
    }

    // Check if the mouse is being dragged on the top or bottom border
    if (jPanel1.getCursor().getType() == Cursor.N_RESIZE_CURSOR) {
        int newHeight = Math.max(minHeight, panelHeight + (mouseY - panelHeight / 2));
        jPanel1.setPreferredSize(new Dimension(panelWidth, newHeight));
    }

    // Repaint the panel to update the changes
    jPanel1.revalidate();
    jPanel1.repaint();
    }//GEN-LAST:event_jPanel1MouseDragged

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        // TODO add your handling code here:
         int mouseX = evt.getX();
        int mouseY = evt.getY();
    
    // Get the current size of the panel
    int panelWidth = jPanel1.getWidth();
    int panelHeight = jPanel1.getHeight();
    int borderWidth = 5;
    if (mouseX <= borderWidth || mouseX >= panelWidth - borderWidth) {
        jPanel1.setCursor(Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR));
    } else if (mouseY <= borderWidth || mouseY >= panelHeight - borderWidth) {
        jPanel1.setCursor(Cursor.getPredefinedCursor(Cursor.N_RESIZE_CURSOR));
    } else {
        // If the mouse is not over any border, reset the cursor to default
        jPanel1.setCursor(Cursor.getDefaultCursor());
    }
    }//GEN-LAST:event_jPanel1MouseMoved

    private void jPanel3MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseMoved
        // TODO add your handling code here:
         int mouseX = evt.getX();
        int mouseY = evt.getY();
    
    // Get the current size of the panel
    int panelWidth = jPanel3.getWidth();
    int panelHeight = jPanel3.getHeight();
    int borderWidth = 5;
    if (mouseX <= borderWidth || mouseX >= panelWidth - borderWidth) {
        jPanel3.setCursor(Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR));
    } else if (mouseY <= borderWidth || mouseY >= panelHeight - borderWidth) {
        jPanel3.setCursor(Cursor.getPredefinedCursor(Cursor.N_RESIZE_CURSOR));
    } else {
        // If the mouse is not over any border, reset the cursor to default
        jPanel3.setCursor(Cursor.getDefaultCursor());
    }
    }//GEN-LAST:event_jPanel3MouseMoved

    private void jPanel3MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseDragged
        // TODO add your handling code here:
        int mouseX = evt.getX();
    int mouseY = evt.getY();

    // Get the current size of the panel
    int panelWidth = jPanel3.getWidth();
    int panelHeight = jPanel3.getHeight();

    // Define the minimum size (adjust this value according to your preference)
    int minWidth = 100;
    int minHeight = 100;

    // Check if the mouse is being dragged on the left or right border
    if (jPanel3.getCursor().getType() == Cursor.E_RESIZE_CURSOR) {
        int newWidth = Math.max(minWidth, panelWidth + (mouseX - panelWidth / 2));
        jPanel3.setPreferredSize(new Dimension(newWidth, panelHeight));
    }

    // Check if the mouse is being dragged on the top or bottom border
    if (jPanel3.getCursor().getType() == Cursor.N_RESIZE_CURSOR) {
        int newHeight = Math.max(minHeight, panelHeight + (mouseY - panelHeight / 2));
        jPanel3.setPreferredSize(new Dimension(panelWidth, newHeight));
    }

    // Repaint the panel to update the changes
    jPanel3.revalidate();
    jPanel3.repaint();
    }//GEN-LAST:event_jPanel3MouseDragged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Test().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
